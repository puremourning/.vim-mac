set nocompatible
filetype off

" YCM config
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_autoclose_preview_window_after_completion=0
let g:ycm_autoclose_preview_window_after_insertion=1
let g:ycm_confirm_extra_conf=0
let g:ycm_always_populate_location_list=1
"let g:ycm_server_use_unix_domain_socket=1
let g:ycm_cpp_flags = [ '-x',  'c++', '-Wall', '-Wextra', '-Werror' ]
let g:ycm_extra_conf_vim_data = [ 'g:ycm_cpp_flags' ]
let g:ycm_add_preview_window_to_completeopt = 1
let g:ycm_always_populate_location_list=1
let g:ycm_complete_in_comments=1
let g:ycm_collect_identifiers_from_comments_and_strings=1
let g:ycm_collect_identifiers_from_tags_files=1
"let g:ycm_global_ycm_extra_conf = expand( '$HOME/.vim/ycm_extra_conf_global.py' )
"let g:ycm_show_diagnostics_ui=0
"let g:solarized_termcolors=256
let g:ycm_python_binray_path='python3'
let g:ycm_java_jdtls_use_clean_workspace=0
let g:ycm_java_jdtls_workspace_root_path=$HOME . '/.ycmd/java/Workspace'
let g:ycm_java_jdtls_extension_path=[ $HOME . '/.vscode/extensions' ]
let g:ycm_server_log_level='debug'
let g:ycm_keep_logfiles=1
let g:ycm_echo_current_diagnostic=1
let g:ycm_show_diagnostics_ui=1
if !exists( 'g:ycm_use_clangd' )
  let g:ycm_use_clangd=get( g:, 'benj_test_ycm', 0 )
endif
let g:ycm_enable_hover=1

let g:ycm_clangd_args = get( g:, 'ycm_clangd_args', [] )
call extend( g:ycm_clangd_args, [
      \ '-background-index',
      \ '-completion-style=bundled',
      \ '-pch-storage=memory',
      \ '-j=4',
      \ '--clang-tidy=0',
      \ ] )

if get( g:, 'benj_test_ycm', 0 )
  let g:ycm_clangd_binary_path = get( g:, 'ycm_clangd_binary_path',
        \ expand( '$HOME/Development/llvm-project/build/bin/clangd' ) )

  let g:ycm_clangd_binary_path = system( 'brew --prefix llvm' )->trim()
                               \ . '/bin/clangd'

  if executable( g:ycm_clangd_binary_path )
    call extend( g:ycm_clangd_args, [
          \ '-log=verbose',
          \ '-suggest-missing-includes',
          \ '-header-insertion=iwyu',
          \ ] )
  else
    unlet g:ycm_clangd_binary_path
  endif
endif


let s:lsp_dir = expand( '<sfile>:p:h' ) . '/bundle/lsp-examples'

if get( g:, 'benj_test_ycm', 0 )
  if isdirectory( expand( '$HOME/Development/lsp' ) )
    let s:lsp_dir = expand( '$HOME/Development/lsp' )
  endif
endif

"     \   { 'name': 'vim',
"     \     'filetypes': [ 'vim' ],
"     \     'cmdline': [ s:lsp_dir . '/viml/node_modules/.bin/vim-language-server', '--stdio' ]
"     \   },
"
if isdirectory( s:lsp_dir )
  let g:ycm_language_server = [
    \   {
    \     'name': 'yaml',
    \     'cmdline': [ 'node', s:lsp_dir . '/yaml/node_modules/.bin/yaml-language-server', '--stdio' ],
    \     'filetypes': [ 'yaml' ],
    \   },
    \   {
    \     'name': 'php',
    \     'cmdline': [ 'php', s:lsp_dir . '/php/vendor/bin/php-language-server.php' ],
    \     'filetypes': [ 'php' ],
    \   },
    \   {
    \     'name': 'json',
    \     'cmdline': [ 'node', s:lsp_dir . '/json/node_modules/.bin/vscode-json-languageserver', '--stdio' ],
    \     'filetypes': [ 'json' ],
    \   },
    \   {
    \     'name': 'ruby',
    \     'cmdline': [ s:lsp_dir . '/ruby/bin/solargraph', 'stdio' ],
    \     'filetypes': [ 'ruby' ],
    \   },
    \   { 'name': 'kotlin',
    \     'filetypes': [ 'kotlin' ],
    \     'cmdline': [ s:lsp_dir . '/kotlin/server/build/install/server/bin/server' ],
    \   },
    \   { 'name': 'd',
    \     'filetypes': [ 'd' ],
    \     'cmdline': [ s:lsp_dir . '/d/serve-d' ],
    \   },
    \   { 'name': 'vue',
    \     'filetypes': [ 'vue' ],
    \     'cmdline': [ s:lsp_dir . '/vue/node_modules/.bin/vls' ]
    \   },
    \   { 'name': 'docker',
    \     'filetypes': [ 'dockerfile' ],
    \     'cmdline': [ s:lsp_dir . '/docker/node_modules/.bin/docker-langserver', '--stdio' ]
    \   },
    \   { 'name': 'groovy',
    \     'filetypes': [ 'groovy' ],
    \     'cmdline': [ 'java', '-jar', s:lsp_dir . '/groovy/groovy-language-server/build/libs/groovy-language-server-all.jar' ]
    \   },
    \ ]
endif

let g:ycm_rust_src_path='/Users/ben/Development/rust/rust/src'

let g:ycm_use_syntastic_loc_list = 1

let g:snips_author='Ben Jackson (puremourning@gmail.com)'

let g:Verdin#cooperativemode = 1
let g:Verdin#fuzzymatch = 0
let g:Verdin#autocomplete = 0
let g:Verdin#autobraketinsert = 0

" vim-gitgutter config
if exists( '&signcolumn' )
  set signcolumn=yes
endif

" Adds Vim
let g:ycm_semantic_triggers =  {
  \   'vim' : [ '.', ':', '#' ],
  \   'c': [ 're!\w{3}', '_' ],
  \   'json': [ ' ' ],
  \ }

" Remove:
"     \ 'markdown' : 1,
"     \ 'vimwiki' : 1,
"     \ 'text' : 1,
"     \ 'pandoc' : 1,
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'unite' : 1,
      \ 'infolog' : 1,
      \ 'mail' : 1
      \}


" taglist config
let g:Tlist_Use_Right_Window = 1
let g:Tlist_Inc_Winwidth = 0
let g:Tlist_WinWidth = 45
let g:Tlist_GainFocus_On_ToggleOpen = 0
let g:Tlist_Ctags_Cmd = 'ctags'
let g:Tlist_Show_One_File = 0
let g:Tlist_Sort_Type = 'name'

" UltiSnips triggering
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

" syntastic config
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_python_python_exec = 'python3'

let g:syntastic_mode_map = {
      \ 'mode': 'active',
      \ 'passive_filetypes': [ 'c', 'cpp', 'objc', 'java', 'ruby', 'php' ]
      \ }

let g:syntastic_java_checkers = []
let g:EclimFileTypeValidate = 0

let g:syntastic_cpp_checkers = [ 'cppcheck' ]
" TODO: Do this in the ftplugin when you know if you need cargo or rustc
let g:syntastic_rust_checkers = [ 'cargo' ]

" neomake
let g:neomake_cpp_enabled_makers = []
let g:neomake_c_enabled_makers = []
let g:neomake_objc_enabled_makers = []
let g:neomake_java_enabled_makers = []
let g:neomake_vim_enabled_makers = []

" indent guides
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 0

" windowswap mappings
let g:windowswap_map_keys = 0
nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<CR>

" CommandT
" we use <leader>t for taglist
nnoremap <silent> <leader>t :CommandT<CR>
let g:CommandTFileScanner='find'

" vim-grep - use the silver searcher
let g:grepprg="ag --nogroup --column"

" vimspector
" let g:vimspector_enable_mappings = 'VISUAL_STUDIO'
let g:vimspector_enable_mappings = 'HUMAN'

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

if get(g:, 'benj_test_ycm')
  Plugin 'puremourning/YouCompleteMe', { 'pinned': 1 }
  Plugin 'puremourning/vimspector',    { 'pinned': 1 }
else
  Plugin 'puremourning/YouCompleteMe', { 'name': 'YouCompleteMe-Clean' }
  Plugin 'puremourning/vimspector',    { 'name': 'vimspector-Clean' }
endif

Plugin 'taglist.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'lifepillar/vim-solarized8'
Plugin 'hallison/vim-markdown'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-repeat'
Plugin 'SirVer/ultisnips'
Plugin 'rust-lang/rust.vim'
Plugin 'tfnico/vim-gradle'
"Plugin 'artur-shaik/vim-javacomplete2'
Plugin 'wesQ3/vim-windowswap'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'Valloric/ListToggle'
Plugin 'honza/vim-snippets'
Plugin 'neomake/neomake'
Plugin 'vim-scripts/applescript.vim'
Plugin 'stephpy/vim-yaml'
Plugin 'saltstack/salt-vim'
Plugin 'tpope/vim-surround'
Plugin 'leafgarland/typescript-vim'
Plugin 'FooSoft/vim-argwrap'
Plugin 'tpope/vim-dispatch'
Plugin 'teoljungberg/vim-grep'
Plugin 'toyamarinyon/vim-swift'
Plugin 'cespare/vim-toml'
Plugin 'rdolgushin/groovy.vim'
Plugin 'AndrewRadev/splitjoin.vim'
Plugin 'romainl/Apprentice'
Plugin 'machakann/vim-Verdin'
Plugin 'dhruvasagar/vim-table-mode'
Plugin 'posva/vim-vue'
Plugin 'keith/swift.vim'

call vundle#end()
filetype plugin indent on

if exists( '*neomake#configure#automake' )
  call neomake#configure#automake( 'nrwi', 250 )
endif

" vim:ft=vim:foldmethod=marker
