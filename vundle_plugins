set nocompatible
filetype off

" YCM config
let g:ycm_seed_identifiers_with_syntax=0
let g:ycm_autoclose_preview_window_after_insertion=1
let g:ycm_confirm_extra_conf=0
let g:ycm_complete_in_comments=1
let g:ycm_complete_in_strings=1
let g:ycm_always_populate_location_list=1

" Use a popup for the completion preview window if available
let g:ycm_add_preview_to_completeopt = 'popup'
try
  set completepopup=height:10,width:60,highlight:PmenuSbar,border:off
catch /.*/
endtry

let g:ycm_collect_identifiers_from_comments_and_strings=1
let g:ycm_collect_identifiers_from_tags_files=0
let g:ycm_java_jdtls_use_clean_workspace=0
if executable( '/usr/local/opt/java/bin/java' )
  let g:ycm_java_binary_path = '/usr/local/opt/java/bin/java'
elseif executable( '/usr/local/opt/java11/bin/java' )
  let g:ycm_java_binary_path = '/usr/local/opt/java11/bin/java'
endif
let g:ycm_java_jdtls_workspace_root_path=$HOME . '/.ycmd/java/Workspace'
let g:ycm_server_log_level='debug'
let g:ycm_keep_logfiles=1
let g:ycm_auto_hover = ''
let g:ycm_use_clangd=get( g:, 'ycm_use_clangd', 1 )
let g:ycm_clangd_args = get( g:, 'ycm_clangd_args', [] )
call extend( g:ycm_clangd_args, [
      \ '-background-index',
      \ '-completion-style=bundled',
      \ '-pch-storage=memory',
      \ '-cross-file-rename',
      \ '-suggest-missing-includes',
      \ '-header-insertion=iwyu',
      \ '-log=verbose',
      \ '-j=4',
      \ '--clang-tidy=0',
      \ ] )

" Ignore the error about comments not being allowed
let g:ycm_filter_diagnostics = {
      \   "json": {
      \     "regex": [ 'Comments.*\[521\]' ],
      \   },
      \ }

if g:ycm_use_clangd
  " let g:ycm_clangd_binary_path = get( g:, 'ycm_clangd_binary_path',
  "       \ expand( '$HOME/Development/llvm-project/build/bin/clangd' ) )

  if !get( g:, 'ycm_clangd_clean', 0 )
    if executable( '/usr/local/opt/llvm/bin/clangd' )
      let g:ycm_clangd_binary_path='/usr/local/opt/llvm/bin/clangd'
    endif
  endif
endif

" Adds Vim
let g:ycm_semantic_triggers =  {
  \   'vim' : [ '.', ':', '#' ],
  \   'c,cpp,objc': [ 're!\w{3}', '_' ],
  \   'json': [ ' ' ],
  \   'VimspectorPrompt': [ '.', '->', ':', '<' ]
  \ }

" Remove:
"     \ 'markdown' : 1,
"     \ 'vimwiki' : 1,
"     \ 'text' : 1,
"     \ 'pandoc' : 1,
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'unite' : 1,
      \ 'infolog' : 1,
      \ 'mail' : 1
      \}

let s:lsp_dir = expand( '<sfile>:p:h' ) . '/bundle/lsp-examples'

if isdirectory( expand( '$HOME/Development/lsp' ) )
  let s:lsp_dir = expand( '$HOME/Development/lsp' )
endif

" let g:ycm_disable_jedi_completer = v:true
"    \   { 'name': 'msptvs',
"    \     'filetypes': [ 'python' ],
"    \    'cmdline': [ 'dotnet', s:lsp_dir . '/python/microsoft/python-language-server/output/bin/Debug/Microsoft.Python.LanguageServer.dll' ],
"    \   },
"    \   { 'name': 'palantirpython',
"    \     'filetypes': [ 'python' ],
"    \    'cmdline': [ s:lsp_dir . '/python/palantir/env/bin/pyls' ],
"    \   },

if isdirectory( s:lsp_dir )
  let g:ycm_language_server = [
    \   {
    \     'name': 'php',
    \     'cmdline': [ 'php', s:lsp_dir . '/php/vendor/bin/php-language-server.php' ],
    \     'filetypes': [ 'php' ],
    \   },
    \   {
    \     'name': 'yaml',
    \     'cmdline': [ 'node', s:lsp_dir . '/yaml/node_modules/.bin/yaml-language-server', '--stdio' ],
    \     'filetypes': [ 'yaml' ],
    \     'capabilities': { 'textDocument': { 'completion': { 'completionItem': { 'snippetSupport': v:true } } } },
    \   },
    \   {
    \     'name': 'json',
    \     'cmdline': [ 'node', s:lsp_dir . '/json/node_modules/.bin/vscode-json-languageserver', '--stdio' ],
    \     'filetypes': [ 'json' ],
    \     'capabilities': { 'textDocument': { 'completion': { 'completionItem': { 'snippetSupport': v:true } } } },
    \   },
    \   {
    \     'name': 'ruby',
    \     'cmdline': [ s:lsp_dir . '/ruby/bin/solargraph', 'stdio' ],
    \     'filetypes': [ 'ruby' ],
    \   },
    \   { 'name': 'kotlin',
    \     'filetypes': [ 'kotlin' ],
    \     'cmdline': [ s:lsp_dir . '/kotlin/server/build/install/server/bin/server' ],
    \   },
    \   { 'name': 'd',
    \     'filetypes': [ 'd' ],
    \     'cmdline': [ s:lsp_dir . '/d/serve-d' ],
    \   },
    \   { 'name': 'vue',
    \     'filetypes': [ 'vue' ],
    \     'cmdline': [ s:lsp_dir . '/vue/node_modules/.bin/vls' ]
    \   },
    \   { 'name': 'docker',
    \     'filetypes': [ 'dockerfile' ],
    \     'cmdline': [ s:lsp_dir . '/docker/node_modules/.bin/docker-langserver', '--stdio' ]
    \   },
    \   { 'name': 'groovy',
    \     'filetypes': [ 'groovy' ],
    \     'cmdline': [ 'java', '-jar', s:lsp_dir . '/groovy/groovy-language-server/build/libs/groovy-language-server-all.jar' ]
    \   },
    \   { 'name': 'rust',
    \     'filetypes': [ 'rust' ],
    \     'cmdline': [ s:lsp_dir . '/rust/rust-analyzer/target/release/rust-analyzer' ],
    \     'project_root_files': [ 'Cargo.toml' ],
    \   },
    \   { 'name': 'lua',
    \     'filetypes': [ 'lua' ],
    \     'cmdline': [ expand( '$HOME/Development/lsp/lua/lua-language-server/root/extension/server/bin/macOS/lua-language-server'),
    \                  expand( '$HOME/Development/lsp/lua/lua-language-server/root/extension/server/main.lua' ) ],
    \     'capabilities': { 'textDocument': { 'completion': { 'completionItem': { 'snippetSupport': v:true } } } },
    \   },
    \   { 'name': 'vim',
    \     'filetypes': [ 'vim' ],
    \     'cmdline': [ s:lsp_dir . '/viml/node_modules/.bin/vim-language-server', '--stdio' ],
    \     'capabilities': { 'textDocument': { 'completion': { 'completionItem': { 'snippetSupport': v:false } } } },
    \   },
    \   { 'name': 'gdscript',
    \     'filetypes': [ 'gdscript' ],
    \     'port': 6008,
    \   },
    \ ]
endif

let g:snips_author='Ben Jackson (puremourning@gmail.com)'

let g:Verdin#cooperativemode = 1
let g:Verdin#fuzzymatch = 0
let g:Verdin#autocomplete = 0
let g:Verdin#autobraketinsert = 0

" vim-gitgutter config
if exists( '&signcolumn' )
  set signcolumn=yes
endif


" taglist config
let g:Tlist_Use_Right_Window = 1
let g:Tlist_Inc_Winwidth = 0
let g:Tlist_WinWidth = 45
let g:Tlist_GainFocus_On_ToggleOpen = 0
let g:Tlist_Ctags_Cmd = 'ctags'
let g:Tlist_Show_One_File = 0
let g:Tlist_Sort_Type = 'name'

" UltiSnips triggering
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

" syntastic config
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_python_python_exec = 'python3'

let g:syntastic_mode_map = {
      \ 'mode': 'active',
      \ 'passive_filetypes': [ 'c', 'cpp', 'objc', 'java', 'ruby', 'php' ]
      \ }

let g:syntastic_java_checkers = []
let g:EclimFileTypeValidate = 0

let g:syntastic_cpp_checkers = [ 'cppcheck' ]
" TODO: Do this in the ftplugin when you know if you need cargo or rustc
let g:syntastic_rust_checkers = [ 'cargo' ]

" neomake
let g:neomake_cpp_enabled_makers = []
let g:neomake_c_enabled_makers = []
let g:neomake_objc_enabled_makers = []
let g:neomake_java_enabled_makers = []
let g:neomake_vim_enabled_makers = []
let g:neomake_rust_enabled_makers = []
let g:neomake_python_python_exe = 'python3'

let g:neomake_vim_enabled_makers = []
if executable( 'vint' )
  let g:neomake_vim_enabled_makers += [ 'vint' ]
endif

" windowswap mappings
let g:windowswap_map_keys = 0
nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<CR>

" vim-grep - use the silver searcher
let g:grepprg="ag --nogroup --column"

" vimspector
" let g:vimspector_enable_mappings = 'VISUAL_STUDIO'
let g:vimspector_enable_mappings = 'HUMAN'
let g:vimspector_test_args = '--basedir test-base'
let g:vimspector_install_gadgets = [ '--all', '--force-all' ]

" netrw
let g:netrw_keepj = ''

let g:markdown_fenced_languages = [
      \ 'help',
      \ 'c++=cpp',
      \ 'bash=sh',
      \ 'sh',
      \ 'viml=vim',
      \ 'json',
      \ 'rust',
      \ 'python',
      \ ]
let g:markdown_syntax_conceal = 1

" fzf

" Required:
" - width [float range [0 ~ 1]]
" - height [float range [0 ~ 1]]
"
" Optional:
" - xoffset [float default 0.5 range [0 ~ 1]]
" - yoffset [float default 0.5 range [0 ~ 1]]
" - highlight [string default 'Comment']: Highlight group for border
" - border [string default 'rounded']: Border style
"   - 'rounded' / 'sharp' / 'horizontal' / 'vertical' / 'top' / 'bottom' / 'left' / 'right'
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

" Customize fzf colors to match your color scheme
" - fzf#wrap translates this to a set of `--color` options
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }


set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

" Development environment
if get(g:, 'benj_test_ycm')
  let g:vimspector_base_dir = expand( '<sfile>:p:h' ) . '/vimspector-conf'

  let g:ycm_java_jdtls_extension_path=[
        \ g:vimspector_base_dir . '/gadgets/macos' ]

  Plugin 'puremourning/YouCompleteMe', { 'pinned': 1 }
  Plugin 'puremourning/vimspector',    { 'pinned': 1 }
else
  let g:ycm_java_jdtls_extension_path=[
        \ expand( '<sfile>:p:h' ) . '/bundle/vimspector-Clean/gadgets/macos/' ]

  Plugin 'puremourning/YouCompleteMe', { 'name': 'YouCompleteMe-Clean' }
  Plugin 'puremourning/vimspector',    { 'name': 'vimspector-Clean' }
endif
if has( 'python3' )
  Plugin 'SirVer/ultisnips'
  Plugin 'honza/vim-snippets'
endif
Plugin 'neomake/neomake'
Plugin 'airblade/vim-gitgutter'
Plugin 'ntpeters/vim-better-whitespace'

" Colour schemes
Plugin 'romainl/Apprentice'

" Quality of life improvements to built-in features
Plugin 'tpope/vim-repeat'
Plugin 'wesQ3/vim-windowswap'
Plugin 'Valloric/ListToggle'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-dispatch'
Plugin 'teoljungberg/vim-grep'
Plugin 'wellle/targets.vim'
" Plugin 'ludovicchabant/vim-gutentags' (just gives errors all the damn time)

" Filetype support
Plugin 'tpope/vim-markdown'
Plugin 'dhruvasagar/vim-table-mode'
Plugin 'stephpy/vim-yaml'
Plugin 'saltstack/salt-vim'
Plugin 'leafgarland/typescript-vim'
Plugin 'cespare/vim-toml'
Plugin 'rdolgushin/groovy.vim'
Plugin 'vim-scripts/applescript.vim'
Plugin 'rust-lang/rust.vim'
Plugin 'tfnico/vim-gradle'
Plugin 'posva/vim-vue'
Plugin 'toyamarinyon/vim-swift'
Plugin 'keith/swift.vim'
Plugin 'gavocanov/vim-js-indent'
Plugin 'habamax/vim-godot'
Plugin 'udalov/kotlin-vim'

Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'

Plugin 'Jupyter-vim/jupyter-vim'
Plugin 'puremourning/vim-activate-venv'

call vundle#end()
filetype plugin indent on

call neomake#configure#automake( 'nrwi', 250 )

" vim:ft=vim:foldmethod=marker
